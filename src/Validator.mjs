// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Js_exn from "rescript/lib/es6/js_exn.js";
import * as Js_types from "rescript/lib/es6/js_types.js";

function pathsExist(paths) {
  return Promise.all(paths.map(function (path) {
                    return Fs.promises.open(path, "r");
                  })).then(function (filehandles) {
              return Promise.all(filehandles.map(function (fh) {
                              return Curry._1(fh.close, undefined);
                            }));
            });
}

function isStringEmpty(x) {
  if (Js_types.test(x, /* String */4)) {
    return x.length === 0;
  } else {
    return false;
  }
}

function isStringNotEmpty(x) {
  if (Js_types.test(x, /* String */4)) {
    return x.length > 0;
  } else {
    return false;
  }
}

function coerceString(x) {
  var x$1 = Js_types.classify(x);
  if (typeof x$1 === "number" || x$1.TAG !== /* JSString */1) {
    return "";
  } else {
    return x$1._0;
  }
}

function coerceBool(x) {
  var match = Js_types.classify(x);
  if (typeof match === "number") {
    if (match === /* JSTrue */1) {
      return true;
    } else {
      return false;
    }
  } else if (match.TAG === /* JSString */1) {
    return true;
  } else {
    return false;
  }
}

function throwOnStringEmpty(msg, x) {
  if (isStringNotEmpty(x)) {
    return x;
  } else {
    return Js_exn.raiseError(msg);
  }
}

export {
  pathsExist ,
  isStringEmpty ,
  isStringNotEmpty ,
  coerceString ,
  coerceBool ,
  throwOnStringEmpty ,
  
}
/* fs Not a pure module */
